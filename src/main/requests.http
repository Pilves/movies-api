### Base URL configuration
@baseUrl = http://localhost:8080/api

### 1. BASIC ENTITY CREATION AND VALIDATION

### 1.1 Create Genres (Testing POST with 201 Created)
POST {{baseUrl}}/genres
Content-Type: application/json

{
  "name": "Action"
}

### Create Drama genre
POST {{baseUrl}}/genres
Content-Type: application/json

{
  "name": "Drama"
}

### 1.2 Test Invalid Genre Creation (Duplicate name)
POST {{baseUrl}}/genres
Content-Type: application/json

{
  "name": "Action"
}

### 1.3 Create Actors with valid dates (Testing ISO 8601 format)
POST {{baseUrl}}/actors
Content-Type: application/json

{
  "name": "Emma Stone",
  "birthDate": "1988-11-06"
}

### Create more actors
POST {{baseUrl}}/actors
Content-Type: application/json

{
  "name": "Ryan Goslings",
  "birthDate": "1980-11-12"
}

### 1.4 Test Invalid Actor Creation (Bad date format)
POST {{baseUrl}}/actors
Content-Type: application/json

{
  "name": "Test Actor",
  "birthDate": "1990-14-30"
}

### 1.5 Create Movie with genres and actors
POST {{baseUrl}}/movies
Content-Type: application/json

{
  "title": "The Matrix",
  "releaseYear": 1999,
  "duration": 136,
  "genres": [
    {"id": 1},
    {"id": 3}
  ],
  "actors": [
    {"id": 1},
    {"id": 2}
  ]
}

### 1.6 Test Invalid Movie Creation
POST {{baseUrl}}/movies
Content-Type: application/json

{
  "title": "",
  "releaseYear": 2025,
  "duration": -120
}

### 2. BASIC RETRIEVAL OPERATIONS

### 2.1 Get all genres (Pagination test)
GET {{baseUrl}}/genres?page=0&size=10

### 2.2 Get all movies (Pagination test)
GET {{baseUrl}}/movies?page=0&size=10

### 2.3 Get all actors (Pagination test)
GET {{baseUrl}}/actors?page=0&size=10

### 2.4 Test invalid pagination
GET {{baseUrl}}/movies?page=-1&size=99999

### 3. SEARCH AND FILTER OPERATIONS

### 3.1 Search actors by name (case-insensitive)
GET {{baseUrl}}/actors?name=EMMA

### 3.2 Search movies by title
GET {{baseUrl}}/movies/search?title=matrix

### 3.3 Filter movies by year
GET {{baseUrl}}/movies?year=1999

### 3.4 Filter movies by genre
GET {{baseUrl}}/movies?genre=1

### 3.5 Filter movies by actor
GET {{baseUrl}}/movies?actor=1

### 4. RELATIONSHIP QUERIES

### 4.1 Get actors in a movie
GET {{baseUrl}}/movies/1/actors

### 4.2 Get movies for an actor
GET {{baseUrl}}/movies?actor=1

### 5. UPDATE OPERATIONS

### 5.1 Update genre (PATCH test)
PATCH {{baseUrl}}/genres/1
Content-Type: application/json

{
  "name": "Action/Adventure"
}


### 5.3 Update movie's actors
PATCH {{baseUrl}}/movies/1
Content-Type: application/json

{
  "actors": [
    {"id": 1},
    {"id": 2},
    {"id": 3}
  ]
}

### 6. DELETE OPERATIONS

### 6.1 Try to delete genre with movies (should fail)
DELETE {{baseUrl}}/genres/1

### 6.2 Force delete genre
DELETE {{baseUrl}}/genres/1?force=true

### 6.3 Try to delete actor with movies (should fail)
DELETE {{baseUrl}}/actors/1

### 6.4 Force delete actor
DELETE {{baseUrl}}/actors/1?force=true

### 7. ERROR HANDLING TESTS

### 7.1 Get non-existent genre (404 test)
GET {{baseUrl}}/genres/999

### 7.2 Get non-existent movie (404 test)
GET {{baseUrl}}/movies/999

### 7.3 Get non-existent actor (404 test)
GET {{baseUrl}}/actors/999

### 8. COMPLEX SCENARIOS

### 8.1 Create movie with multiple genres and actors in single request
POST {{baseUrl}}/movies
Content-Type: application/json

{
  "title": "Inception",
  "releaseYear": 2010,
  "duration": 148,
  "genres": [
    {"id": 1},
    {"id": 3},
    {"id": 5}
  ],
  "actors": [
    {"id": 2},
    {"id": 3},
    {"id": 4}
  ]
}

### 8.2 Update movie with complete data change
PATCH {{baseUrl}}/movies/2
Content-Type: application/json

{
  "title": "Inception: Extended Cut",
  "releaseYear": 2010,
  "duration": 162,
  "genres": [
    {"id": 1},
    {"id": 3}
  ],
  "actors": [
    {"id": 2},
    {"id": 3}
  ]
}